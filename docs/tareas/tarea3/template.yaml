AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  üè¶ Infraestructura Serverless para Aplicaci√≥n de Banca M√≥vil
  Arquitectura H√≠brida con AWS Lambda, API Gateway, DynamoDB y servicios on-premises

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        USER_POOL_ID: !Ref CognitoUserPool
        CLIENT_ID: !Ref CognitoUserPoolClient
        REGION: !Ref AWS::Region
        JWT_SECRET: !Ref JWTSecret
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Ambiente de despliegue
  
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR del VPC
  
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR de la primera subred privada
  
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR de la segunda subred privada

Resources:
  # VPC y Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-banking-vpc"
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-internet-gateway"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-lambda-sg"

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-database-sg"

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-banking-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "ON"
      SoftwareTokenMfaConfiguration:
        Enabled: true
      UserPoolTags:
        Environment: !Ref Environment

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${Environment}-banking-client"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # KMS Key para encriptaci√≥n
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for banking application encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Lambda functions to use the key
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:Encrypt
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${Environment}-banking-key"
      TargetKeyId: !Ref KMSKey

  # DynamoDB Tables
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-banking-transactions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdTimestampIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-banking-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-banking-cache"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Functions
  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-banking-auth"
      CodeUri: ./
      Handler: backend_serverless.lambda_handler_auth
      Description: Lambda function for user authentication
      Environment:
        Variables:
          TRANSACTIONS_TABLE: !Ref TransactionsTable
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CognitoUserPoolPolicy:
            UserPoolId: !Ref CognitoUserPool
        - KMSDecryptPolicy:
            KeyId: !Ref KMSKey
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /auth
            Method: post

  TransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-banking-transactions"
      CodeUri: ./
      Handler: backend_serverless.lambda_handler_transactions
      Description: Lambda function for processing banking transactions
      Environment:
        Variables:
          TRANSACTIONS_TABLE: !Ref TransactionsTable
          USERS_TABLE: !Ref UsersTable
          CACHE_TABLE: !Ref CacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CacheTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref BankingNotificationsTopic
        - KMSDecryptPolicy:
            KeyId: !Ref KMSKey
      Events:
        TransactionApi:
          Type: Api
          Properties:
            Path: /transactions
            Method: post

  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-banking-notifications"
      CodeUri: ./
      Handler: backend_serverless.lambda_handler_notifications
      Description: Lambda function for sending push notifications
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref BankingNotificationsTopic
      Events:
        NotificationApi:
          Type: Api
          Properties:
            Path: /notifications
            Method: post

  ReportingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-banking-reports"
      CodeUri: ./
      Handler: backend_serverless.lambda_handler_reports
      Description: Lambda function for generating user reports
      Environment:
        Variables:
          TRANSACTIONS_TABLE: !Ref TransactionsTable
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - KMSDecryptPolicy:
            KeyId: !Ref KMSKey
      Events:
        ReportsApi:
          Type: Api
          Properties:
            Path: /reports
            Method: get

  # SNS Topic para notificaciones
  BankingNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-banking-notifications"
      DisplayName: !Sub "${Environment} Banking Notifications"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Groups
  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-banking-auth"
      RetentionInDays: 30

  TransactionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-banking-transactions"
      RetentionInDays: 30

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-banking-notifications"
      RetentionInDays: 30

  ReportsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-banking-reports"
      RetentionInDays: 30

  # IAM Role para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  # API Gateway
  BankingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
      GatewayResponses:
        UNAUTHORIZED:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ACCESS_DENIED:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref BankingApi
      AuthorizerResultTtlInSeconds: 300

  # CloudWatch Dashboard
  BankingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${Environment}-banking-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${Environment}-banking-auth"],
                  [".", "Invocations", "FunctionName", "${Environment}-banking-transactions"],
                  [".", "Invocations", "FunctionName", "${Environment}-banking-notifications"],
                  [".", "Invocations", "FunctionName", "${Environment}-banking-reports"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations by Function"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${Environment}-banking-auth"],
                  [".", "Duration", "FunctionName", "${Environment}-banking-transactions"],
                  [".", "Duration", "FunctionName", "${Environment}-banking-notifications"],
                  [".", "Duration", "FunctionName", "${Environment}-banking-reports"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Duration"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${Environment}-banking-transactions"],
                  [".", "ConsumedWriteCapacityUnits", "TableName", "${Environment}-banking-transactions"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Capacity Units"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "${Environment}-banking-api"],
                  [".", "4XXError", "ApiName", "${Environment}-banking-api"],
                  [".", "5XXError", "ApiName", "${Environment}-banking-api"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics"
              }
            }
          ]
        }

Outputs:
  ApiGatewayUrl:
    Description: "URL del API Gateway"
    Value: !Sub "https://${BankingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-banking-api-url"

  CognitoUserPoolId:
    Description: "ID del User Pool de Cognito"
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${Environment}-cognito-user-pool-id"

  CognitoUserPoolClientId:
    Description: "ID del Client de Cognito"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${Environment}-cognito-client-id"

  DynamoDBTransactionsTable:
    Description: "Nombre de la tabla de transacciones"
    Value: !Ref TransactionsTable
    Export:
      Name: !Sub "${Environment}-transactions-table"

  DynamoDBUsersTable:
    Description: "Nombre de la tabla de usuarios"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${Environment}-users-table"

  KMSKeyId:
    Description: "ID de la clave KMS"
    Value: !Ref KMSKey
    Export:
      Name: !Sub "${Environment}-kms-key-id"

  VPCId:
    Description: "ID del VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${Environment}-vpc-id"

  CloudWatchDashboard:
    Description: "URL del Dashboard de CloudWatch"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Environment}-banking-dashboard"

